#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import rospy
import rosparam
import roslib
import smach
import smach_ros
from fmmmod import FeatureFromVoice, FeatureFromRecog,  LocInfo, SaveInfo
from std_msgs.msg import Float64
from happymimi_msgs.srv import SimpleTrg, StrTrg
from happymimi_navigation.srv import NaviLocation, NaviCoord

file_path = roslib.packages.get_pkg_dir('happymimi_teleop') + '/src/'
sys.path.insert(0, file_path)
from base_control import BaseControl

class Search(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes = ['searh_finish'],
                             input_keys = ['g_count_in', 'future_in'],
                             output_keys = ['g_count_out'])
        self.navi_srv = rospy.ServiceProxy('navi_location_server', NaviLocation)
        self.find_srv = rospy.ServiceProxy('/recognition/find', RecognitionFind)
        self.head_pub = rospy.Publisher('/servo/head', Float64, queue_size = 1)

        self.si = SaveInfo()
        self.bc = BaseControl()

    def execute(self, userdata):
        rospy.loginfo("Executing state: Search_person")
        guest_num = userdata.g_count_in
        self.sentence_list = userdata.future_in
        rospy.sleep(0.2)
        wave_srv("/fmm/move_operator")
        self.bc.rotateAngle(90, 0.2)
        rospy.sleep(0.5)
        navi_result = self.navi_srv('operator').result
        # navi_result = True
        self.head_pub.publish(-15)
        if navi_result:
            # tts_srv("I'll give you the guest information.")
            wave_srv("/fmm/start_req")
        else:
            # tts_srv("I'm sorry. I couldn't navigate to the operator's location. I will provide the features from here.")
            wave_srv("/fmm/start_req_here")
        print self.sentence_list
        for i in range(len(self.sentence_list)):
            tts_srv(self.sentence_list[i])
            i += 1
        # yamlにでーたを保存
        self.si.saveInfo("guest_" + str(guest_num), self.sentence_list)
        userdata.g_count_out = guest_num + 1
        # self.bc.rotateAngle(90, 0.3)
        return 'tell_finish'
    
